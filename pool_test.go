package main

import (
	"bytes"
	"compress/gzip"
	"crypto/tls"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	ts "pool/tunnel/server"
	"runtime"
	"strings"
	"testing"
	"time"

	"github.com/bugfan/to"
)

func init() {
	runtime.GOMAXPROCS(runtime.NumCPU())
}

// func main(){
func TestPool(t *testing.T) {
	go func() {
		tunnelListen := fmt.Sprintf("%s:%s", "127.0.0.1", "4433")
		keyPEM, err := Asset("cert/tunnel.crt")
		if err != nil {
			return
		}
		certPEM, err := Asset("cert/tunnel.key")
		if err != nil {
			return
		}
		log.Println("CERT-KEY:", to.String(keyPEM), to.String(certPEM))
		tlsConf := ts.LoadTLSConfigFromBytes(certPEM, keyPEM)
		if tlsConf != nil {
			tlsConf.ClientSessionCache = tls.NewLRUClientSessionCache(5000)
		}
		ts.TunnelListener(tunnelListen, tlsConf)
	}()
	<-(chan int)(nil)
}

// Code generated by go-bindata.
// sources:
// cert/id_rsa
// cert/tunnel.crt
// cert/tunnel.csr
// cert/tunnel.key
// DO NOT EDIT!

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _certId_rsa = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x0e\xeb\x6a\x0e\x84\x7b\x3d\xc5\xe9\x85\x85\x72\x2a\xb6\x50\xce\xe1\x97\x95\x3b\x25\x5b\x92\x95\xa3\xad\xa7\x5f\xef\xb9\xed\x65\xc1\x86\x00\xf9\x71\x30\xc0\xfc\xe7\xff\x25\xc8\xaa\xee\xfc\xf1\x1f\xfc\x1f\xcf\xd7\x23\x3e\x90\xff\x98\x72\xfa\x77\x02\xd9\xba\x2e\xcf\x40\x17\x78\xde\x14\x79\x20\xf3\xbb\x5d\x2a\xf2\x6b\x7b\x80\xab\x57\xda\x4f\x3a\xf2\xe3\x94\xe9\x1d\x18\xea\x36\xe7\x32\x03\x2e\xd8\xb0\x1c\x52\x83\xa4\xec\x8a\x52\x46\x72\xff\x40\x8d\x57\x8b\x11\x48\x7f\x5d\xa7\x0f\x57\x78\x86\x6b\x36\x9c\xc2\xfd\xc8\x97\x04\x0f\x37\x82\xac\x1b\x1a\x2d\x8f\xbc\x98\x5b\x2c\x1a\xf2\x16\x06\x2c\x11\x96\x5e\x9e\x8f\x2f\xee\x0a\xe5\x56\x87\xb0\x08\xed\x72\xe2\xb5\x99\x25\x69\x2b\x71\x69\x4c\x4a\x50\x6f\x7b\x68\xe3\x8b\x93\x18\x0d\xb0\xbf\xd5\xe2\xbd\x6c\xdb\x53\x94\x67\x33\x91\x1e\x1e\xd6\x44\x5d\xcd\xc4\xb4\xab\xf9\xdb\x57\x4c\x15\xea\x9e\x29\xb6\x00\x70\xbb\x41\xdc\x66\x5e\x0c\x10\xa5\x61\x93\xd4\x4d\xf0\xf2\xa9\x12\x0e\xdd\x05\x9e\x10\x10\x14\x5f\x82\xb2\x46\x7b\xf5\x98\xfa\x82\xd6\x97\x96\xb0\x6d\xc7\x0b\x3e\x83\x59\x41\xb9\x4a\x47\x4c\xaa\x4c\xd3\x9d\x8c\xbe\xfe\x84\xd3\x4f\xd9\xad\x81\xe5\x97\x61\x3d\xc2\x70\x98\xf5\xac\x32\xb7\xb8\x51\x98\x2b\x19\x66\x8e\xa2\xba\xcf\x72\xa4\xcf\x21\x8d\xd0\x2a\xfd\xf8\xe8\x17\xea\x54\xad\x4e\x0c\x96\x13\xce\x35\x4d\x70\x73\xb6\x83\xcd\x5e\xca\x90\x41\x4e\xa7\x6e\xa6\x8a\x1f\xeb\x77\x73\x5d\xba\xc4\x03\x5e\xe0\xa7\x9f\xd8\x40\xac\x43\xfa\x95\xd8\x78\x59\xa9\x5f\xf7\x86\xdc\x2b\x0e\x12\xb6\xf9\xed\x7d\x93\xcd\xa8\x54\x5d\xfa\x00\xcf\x39\x4d\x25\x6b\xaf\x39\xda\x8a\xe7\x1d\x24\xd5\x54\x18\x89\xe6\xdc\x4c\x95\x6f\xa1\x99\xad\x98\x29\x1a\xb3\xf2\x75\xa2\xef\xfb\x86\x80\x86\x97\x9f\xcb\x4d\xfa\x01\x45\x6e\xa2\x1d\xc5\xf8\x6d\x4a\x11\xc6\x3f\xfa\x4d\xee\xb8\x80\x54\x71\x66\xd3\xa8\x87\xc4\x84\x24\xe8\xaf\xfd\x77\x73\xdc\x55\xb1\x5e\x03\xad\xeb\x3a\xb1\x9c\x7f\x2f\x8c\x35\x85\x58\x22\xe2\x3b\x19\xc5\xa5\x00\xab\x1f\xda\xe5\xda\x01\x26\xa0\x29\x1a\xee\x9e\x48\xc6\x7e\xeb\x73\xf3\xdc\x5a\x69\x99\xbf\xf6\x81\x64\x59\x24\x3e\x55\xe7\xdd\x5a\x08\x90\x0c\x08\x66\x3e\x47\xde\xe3\x11\xca\x4f\x93\x6d\xd9\x06\xe7\x5d\x9a\x54\x8f\xfb\x97\xe3\x89\xb9\x9f\x5c\x0d\x59\xea\x19\x3b\x93\xc0\x1e\xae\xd6\x1a\xe9\xf2\xa4\xe8\x61\x6c\x80\x48\x9e\x33\x76\xf4\x3b\xd4\x5d\xea\x7d\xab\x88\xb2\xa0\x5d\xc4\x73\x0f\xda\x57\x6b\xcc\x38\x5f\x57\xf1\xba\x8e\xfe\x34\x9a\xd5\xf0\x52\xfd\xa8\x73\x41\xd9\x23\xd7\x35\x08\x47\xc1\x31\x8d\x2d\x8b\x3a\xdf\xbc\x83\x76\x61\x68\x09\x59\x5a\xaa\x22\x9f\x9f\x54\x81\x77\xd5\x5b\x75\x06\xe4\x60\xda\xa7\x96\xb4\xf9\xb2\x4a\x7e\x21\x84\xa5\xaf\xc0\x99\x37\xbc\x4d\x3f\x20\x1e\x41\xe0\xbe\xaf\x55\x5c\xbe\x04\x59\xfa\x54\x9e\x41\x09\x41\x9f\x0e\xe3\x47\x1a\xbd\x74\xf9\x73\xe9\x32\x49\xfb\x16\x57\x30\x37\x13\x67\x38\x7e\x13\xd2\x82\x59\x9b\xaf\x56\x2d\x66\x11\x67\xd2\x94\xa3\x36\xfc\x6c\x90\x23\xba\x61\x65\xbc\x8d\xcf\x0a\x85\xf1\x02\x28\x6b\x9f\xce\x66\x95\x64\x03\xc0\x97\xae\x57\x8c\x05\x5f\xc7\x5b\x33\x8e\x3b\x9a\x65\x76\x59\x1e\xc5\x73\x72\xb4\xc0\x0a\x65\x55\x12\x1f\x31\x4e\x37\x7a\xf2\x97\xd8\x46\x6d\x48\x98\x50\x5e\xcb\x2f\x2b\x3b\x74\x39\xad\xd4\x96\xb9\x0b\x74\x3a\x7b\x54\x42\x61\xbe\x6a\xb6\xc1\x81\x0d\x36\x5c\x67\xe9\xcd\xda\xb9\x78\x6d\xd1\x5e\xc4\x15\x9b\xf6\x2c\xaf\x95\x15\x6c\x1a\x0c\x24\x15\x6f\x14\xcd\x0a\x3c\x89\x87\xfc\xf1\x9c\x37\xd6\x18\xac\xe7\xc8\xe3\xde\x10\x57\xfd\xb9\xca\x6f\xbb\x3f\xa9\x77\xe9\x6b\xee\x94\xdd\x2f\x5a\x51\x95\xe2\x30\x32\xcd\x60\x26\x95\x8a\x90\x87\x0b\xcd\x20\x1b\xa6\xcc\xe7\x3f\x08\x35\x68\x6a\x80\x19\x58\x29\x8d\xe8\xe2\x0a\x49\xd2\xc5\xdd\xfd\x1e\x6e\x20\x71\x46\x88\xfd\x83\xdc\x04\x3e\x95\x45\xb4\x0d\xa7\xe9\x59\xd6\xa2\x79\x8b\x50\x66\x45\x6f\x69\x7a\x9e\x13\x99\xf5\xb0\xdc\x4b\x1c\x00\x6a\x2f\xef\xdb\x13\x1c\xbd\x26\x2a\x75\x36\x86\x5f\xad\x4b\xaf\x9c\x7b\x5e\x52\x7c\x9a\xbe\xca\x85\x8b\x50\xad\xf2\x11\x5c\x8c\x26\x50\x90\x2f\x15\x8b\x95\x99\x5c\x73\xef\xb3\x5d\xc3\x14\xc6\x14\xc7\xb1\x2e\xad\x0e\x48\xcd\xd2\x41\x54\x03\x79\xb0\x61\x66\x5c\x90\x4f\xcb\x5a\xec\x4d\x11\x4d\x2c\x86\xea\xa8\x57\xcb\xb6\x4a\x54\x0d\xa1\xb3\x63\xb6\x08\x71\xe1\x68\xd6\xf1\xd7\xf9\x3d\xb0\x1c\x01\x7a\x37\xfe\x90\xf9\x82\x62\x74\xd0\x2a\xb4\x90\x8d\x48\xcc\xe8\x30\x52\x9c\x60\xf7\x88\x67\xde\x02\x84\x8c\xf7\x8b\x60\xe8\x16\x8a\xe2\x2f\xb0\x64\x0c\x73\x66\x60\x7e\x4e\x0d\x6e\xdc\x43\x40\x3c\x15\x21\x3e\x2f\x6c\x8d\x70\x2d\x38\x8b\x1d\x8d\xae\x9b\x2a\x82\x80\xb6\x36\x4e\x9a\xbb\xca\x22\xc5\x84\xb8\x64\xfc\xa7\x0f\x0c\x49\x8f\x29\x53\x02\x1a\x19\x36\xd1\xc8\xf0\x34\x9c\x2b\x62\xd0\x4a\x6b\x0d\xee\xf5\xab\x8f\x36\x9a\xcf\x6e\x29\x3e\xfd\x99\x9e\x8b\xbb\x69\xb4\x3a\xd3\xbd\xd4\x3f\xd4\x46\xc3\xea\x2b\x66\xf1\x01\x1a\x31\x92\xc0\x57\x59\x7c\xa5\x32\xdf\xde\x17\xa0\xf7\xac\xf6\x2c\xc2\x89\xa7\xa0\x31\x43\x64\x50\x49\x0f\xcb\xb5\x17\xa9\xe1\x67\x0f\xfb\xb2\xea\x34\xd2\x8b\x40\xdb\x39\x93\x02\xbe\xe9\xc7\x05\xca\x8d\xb5\x95\xe9\x89\x88\x40\xf8\x09\x11\xb9\x10\x81\x2d\xb9\xc0\xb9\xbf\x80\x52\x09\x2c\x08\x3f\x0a\x8b\xf5\xcc\xc2\x51\xed\x6e\xbf\x35\x4b\x15\x4d\xbf\x5f\xd0\x60\x08\x5b\xb0\xe3\xed\x32\x40\x9f\xaf\xba\x0a\x75\x61\xfa\x5b\x54\xa7\x9a\x1f\x99\x95\x88\xe3\x99\x68\xe0\x51\x46\xb1\x9f\xf8\xe7\xb5\xe4\xa9\x09\xec\x2c\xd6\x2c\x53\x4f\xd2\x06\xa3\x20\xdf\xba\xf4\xbf\xd0\xdf\x58\x91\x1d\xe9\xdf\xe3\xe6\x7f\x01\x00\x00\xff\xff\xff\x9f\x32\x35\x8f\x06\x00\x00")

func certId_rsaBytes() ([]byte, error) {
	return bindataRead(
		_certId_rsa,
		"cert/id_rsa",
	)
}

func certId_rsa() (*asset, error) {
	bytes, err := certId_rsaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cert/id_rsa", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1456277598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _certTunnelCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x95\xc7\xd2\xab\x3a\x16\x85\xe7\x3c\x45\xcf\x5d\x5d\x04\x83\x31\x43\x89\x9c\x73\x9c\x91\x31\x60\x4c\x30\xf1\xe9\xfb\xbf\xe7\x74\xdd\xae\xd3\x57\x23\xd5\x27\xa9\xb4\x6b\xed\x55\x7b\xfd\xfb\xaf\x05\x79\x51\x36\xfe\xc5\xf2\x8e\x27\x0b\x32\x0b\x3c\xfe\x17\x45\x74\x59\x16\x14\x8e\x65\xc1\xbe\xb3\xac\xcd\x3a\xc6\x37\x2a\xb8\xe4\x2b\x45\x1e\x30\x60\xdd\x4d\x4d\xf7\x12\x99\x1d\x83\xc0\xf6\x05\xc0\x41\x5f\xb7\x97\x9d\xb5\x63\x2e\xb0\x6d\x91\xdf\x15\x0e\xf1\x5a\xde\xd6\x01\x29\x02\xdc\xe7\x59\xa8\x4b\xf6\x3b\x18\xd3\x77\xbf\x26\xd7\xff\x38\x3c\xfe\xe0\x8d\x0e\x9f\xbf\xef\x37\x7a\x8c\xb8\x21\x85\x25\x91\xb2\x26\x91\x5d\x07\x44\xdf\x25\x44\x8f\xe5\x27\xb4\x0b\xa9\xab\x3d\xc9\xe9\x74\x48\x46\x9c\xc7\x13\x3a\x27\xef\xa6\xc7\x9f\x06\x27\xe3\x86\xf0\xf9\x61\xf2\x2f\x86\x18\xed\xdf\x70\x0f\x38\x5e\xd3\x41\xf7\xfb\xd7\x46\x67\x6d\x8c\x3c\x78\x0e\x98\xb0\x36\x02\x08\x6a\x0f\x62\x4a\x9f\x86\xe3\x98\xbd\xf3\xbf\x39\x02\x41\xfe\xc7\x81\xec\x81\xea\xf7\x83\x8f\x27\xf2\xfd\x5a\x88\xc1\x99\xbd\x03\x4c\x16\x8a\x31\x11\x8b\xb1\x90\xf4\xda\x97\x1c\x4a\xe6\x0f\x2c\xf9\xd1\x0e\x01\x2f\x79\xe7\xec\x58\x51\x3f\x89\xdc\x6c\xb9\x01\x6c\x1e\x42\x1b\x70\x75\x2d\x5b\xe0\x2f\x71\xeb\x0f\xfb\xb3\x87\x40\x6f\x86\x8e\x56\x17\x83\xd5\xea\xed\x98\xe6\x19\xc4\x58\x37\x84\x2b\x32\xba\x26\xa7\x5e\x4a\xa8\x3e\xd7\xef\xe7\x69\x3c\xc7\x35\x4c\xe3\x34\xb4\xd3\xc0\xd8\xc5\x47\x6b\x26\x9f\x14\xba\xb6\x94\xf2\xea\x37\x3f\xd6\xf1\x50\x3e\x58\x8d\x2f\xc6\x91\x0f\x1b\xcf\xb4\x3d\x8e\xb0\xed\x1e\x5c\x94\x45\x9f\xd7\x5c\x12\x0b\x2f\x0f\x6c\xf6\xba\xf6\xe6\x6d\x17\x91\x37\x3d\x6f\x0f\x17\x77\x93\xb7\x3a\x94\xde\xfa\x95\x2f\xd2\x68\xa6\x46\xc5\xeb\x74\x82\xd0\x1a\x37\x3b\xc5\x28\xc4\xa0\x07\x01\xd4\x15\xbe\x00\x71\x97\x1d\x2f\xa1\x31\x2f\x27\xc2\xf9\xe1\x1f\x65\xa3\x2a\x3a\xcb\xb7\xa3\x13\x48\xd2\xdb\x67\xc6\x9b\xa3\x1a\x33\x1a\x2a\xc6\x62\xbc\x47\x48\x85\xfb\xcd\x9e\x24\x44\xb4\x65\x91\x47\x39\xda\x7d\x10\x49\x93\x4c\x29\xbd\x11\x8d\xe8\x7f\x3b\x50\xc5\x1a\xb0\xa3\xea\xd9\xca\x32\x1a\x02\x56\x54\xd1\x0c\xb4\x6f\x5a\x87\x8b\x54\xe7\xee\xeb\x0a\x15\x45\x5a\xfc\x10\xe1\xd9\x12\x77\x50\xab\xe1\x8c\xcc\x99\xcf\x6d\x7a\x9a\x4a\xea\x69\x0f\x4d\x25\xc3\xdc\xbb\x6d\x98\x91\x2a\x8a\x6f\x78\xcb\x32\x8d\x23\xd9\x07\x8b\x31\x0a\x2d\x15\x93\xbb\x1d\x17\x07\x99\xf8\x05\xb2\x0c\xc0\x79\xdd\x59\xc6\xab\xd1\xe1\xdc\xb3\x00\xb7\xd5\x82\xb9\x11\x65\xd9\x10\x04\x6b\x58\x2f\xec\x05\x84\xeb\x34\x36\x2b\xa9\x52\x0a\x48\xb6\x4f\xb7\xae\xab\xb9\xd4\xd1\xf7\xb7\x07\x93\x3d\x91\x36\x28\xbb\x8d\xeb\x97\x36\x5f\x43\xd5\x8e\x73\x33\x0b\x1e\xe4\xbe\xfa\xfb\x99\xd3\x36\xff\x99\xb6\x2e\xac\xe6\xc0\x26\xe1\xf6\xe3\x32\x16\x5a\xd4\xed\x79\x9b\xda\xd4\x6e\x50\x0d\xf3\x83\xc5\x42\xd4\x9b\xd3\x31\xab\x26\x25\xe5\x8d\x88\x93\x1a\x5d\x68\xdb\x93\xae\x3e\x22\x2d\x9f\x9c\xd9\x7d\xc0\x27\xf4\x24\xf8\xe1\xf3\x80\xd6\xe6\x84\x06\x8a\xe9\xb8\x35\xf3\xa6\x0d\x8b\xe7\x95\x60\xae\x86\x50\x45\x75\xf5\x4d\x50\xad\x73\x17\x0c\xaf\x32\x68\x4e\x35\x72\xfa\xcb\xc4\x8e\x9d\xa5\x63\x96\x0b\x62\x8c\x1c\x9d\x81\xed\x69\x97\x57\xbe\x74\x12\x08\xf7\x70\x89\x5e\x2a\x55\x33\x80\xcd\x12\x0a\x91\x6e\xa1\x76\x66\x54\xb8\xb9\x50\x1e\x85\x9c\xa4\x37\xda\x16\x44\xa1\x49\x00\x4c\xb8\x62\xf2\x13\x85\x8c\x7f\xaa\x7e\x15\xe7\x31\x47\x1f\x72\x15\xf4\xe8\x3b\xec\x96\xf3\xf0\x47\x34\xf4\xf6\x09\x61\xd1\x3d\xef\x50\x40\x2a\x53\x39\x7e\x84\xec\x74\xcc\xad\x00\xb5\x0e\x01\xe0\xff\xdf\xe2\xc2\x7f\x2d\x0e\x81\x54\x6b\x94\x8a\x45\xaf\xf7\x19\x21\x41\x58\x76\xaa\xea\x37\xbd\x78\x8b\xad\x4b\xc5\xb3\xb4\x52\xf8\xee\xc0\x0a\x21\x2c\x08\x34\xc2\x14\xc9\x42\x3d\xae\xfd\xda\x2e\xbc\x71\x68\x55\x0f\x77\x70\xe5\x9f\xbe\x31\x55\x76\x83\x96\xd6\x21\xaf\xd6\x8f\xb4\x11\x17\x05\x6a\x7f\x8e\xba\x39\xd2\x54\xfb\xe0\x5a\xa1\xba\x09\x2e\x46\x12\x7e\xfd\x3d\xc5\x61\xf4\x8e\xef\xc5\xde\x5b\x03\x95\x98\xf6\x2c\x6c\xac\xf9\x08\xe1\x55\xa2\xb3\xea\x7a\x08\xc7\xa0\x5c\x35\x1b\x59\x94\x6c\x5b\x21\x99\xb2\x0d\xe7\xaf\xa7\x3e\x04\xce\x8c\x9a\x92\x50\x30\x4e\x01\x15\x6d\x8b\xdd\x14\x68\xf9\x3c\x4b\x49\xd7\x15\x0f\x0f\x1f\x9e\xb7\x3e\xbd\x54\x5e\xb3\x11\x2a\x5f\xe9\xcf\x74\xd2\xa5\xc9\x8f\x44\x42\xd1\xc9\xa4\xcb\x45\x01\xd0\x3a\xbb\xef\xa9\xf9\xd9\x06\x7c\xf8\xba\xea\xb5\x50\x0d\xdc\xd8\x17\xf3\x33\x1d\x2e\xa6\x37\x63\x3e\x3a\x53\xf1\x38\x54\x05\x71\x89\x5d\x6f\xa4\x75\x57\x64\x91\xd6\x4f\x45\xaf\x48\xd6\x25\xe6\x02\x7d\x8b\x3a\x7f\x11\xcc\x39\xd9\x97\xfb\xd9\xc6\xdb\x91\x28\x37\x9e\x68\xcf\xb1\x34\x7c\xa3\x02\xd7\x52\xbc\x77\x93\x2f\xdf\x48\x70\x90\x56\x92\x88\xf7\x6b\x79\x99\xbb\x1b\xef\x31\x11\x31\x78\x19\x04\x97\x66\xec\x4c\xb5\xb1\x12\x61\x69\xe6\xd6\x66\xee\xbd\xf0\x3c\xd9\xd4\xe7\x53\x39\x63\x68\x44\x98\x41\x3e\xa8\x8b\xde\x91\x79\x8c\xd1\xb2\x33\x3b\xed\xfd\xd3\x9e\x44\x5e\xb8\xd3\x76\x5f\x47\x78\x97\xcf\x66\x38\xef\x24\x4b\x35\x06\xa5\x15\xdc\x92\x29\xdc\xac\xcf\x2e\x91\xdf\xee\xb8\xcb\x1f\xb0\xbd\xc2\x39\xbc\xe0\x1d\x21\xc4\x67\xe6\xb4\xf3\xc2\x04\x65\xf9\xad\xcc\x6c\xb3\x27\xe2\x49\x6a\x14\xd1\x99\x4c\x42\x77\x83\x5c\x76\x90\xc8\x0c\x3c\x03\x33\x3a\x57\x9d\x73\x6d\x5f\xc8\xa3\xdb\x09\xfb\xdd\x5d\xcc\x71\x40\x18\xfa\x95\xa2\x3a\x95\xa7\xab\xa5\x98\x38\x5e\x54\x9d\xec\xfb\x03\x77\xdc\xf3\xdb\x43\x6f\xc5\xde\xfa\x3e\x68\x8f\x21\xa9\x71\x12\x8e\x41\xa1\xd6\x8f\x3b\x8e\x8f\x51\xf5\x4a\x22\x67\x27\x37\xe8\x91\x63\x5d\xd9\xed\xf5\xf8\x08\x81\xd7\xa5\x4c\x5a\xdc\x66\xa6\x7f\x93\x55\xc1\x94\xad\x23\xe4\x43\x3f\x69\x1c\xb4\x88\x04\x96\xb5\xec\xbb\x9c\xc6\x87\x8e\xc1\xcd\x77\xd2\x29\x9a\xe6\x43\x71\xc3\x1d\x19\xf5\x69\x1a\xb2\x74\x8f\x93\xe8\xac\xef\x53\x00\x1c\xbd\x5f\x77\xe3\x6e\x08\x9c\x12\x48\xcf\x0d\xf9\x95\x80\xbc\xc1\xfd\x33\x15\xff\x13\x00\x00\xff\xff\x97\xb1\xa3\xc1\x32\x07\x00\x00")

func certTunnelCrtBytes() ([]byte, error) {
	return bindataRead(
		_certTunnelCrt,
		"cert/tunnel.crt",
	)
}

func certTunnelCrt() (*asset, error) {
	bytes, err := certTunnelCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cert/tunnel.crt", size: 1842, mode: os.FileMode(420), modTime: time.Unix(1455206881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _certTunnelCsr = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x95\x37\x13\xbb\x48\x12\xc5\x73\x3e\xc5\xe6\xd4\x15\x20\x21\x40\xc1\x05\x83\xf7\x30\x08\x9f\xe1\x8d\x10\x5e\xb8\x4f\x7f\xda\xff\x46\x17\xec\x44\x53\xef\x17\x74\x77\xf5\xeb\x7a\xff\xf9\xfb\xb1\x82\xa4\x98\x7f\x71\x82\xe3\x2a\xa2\xc2\x01\x57\xf8\xcb\x11\xa0\x27\xbc\xdc\x3f\x14\x31\x14\x45\xf8\xb8\x1c\x07\x06\x81\x03\x10\xec\x3e\x2f\xe8\x06\x78\x4b\x80\xf0\x04\xb6\x36\x38\x88\x93\x87\xc0\x03\x8b\xad\x4c\x9f\x05\x95\xcb\xe2\x6a\x97\x04\xe3\x98\x7e\xb2\x3f\x3a\xf2\x0f\xc8\xfe\x0f\x28\x2e\x28\xff\xd1\x07\x57\x12\xba\x6f\x2e\xf9\x67\xfa\xf1\x71\x45\xcc\xc7\x58\xca\xc7\x5c\x36\x2a\x4f\x76\x1e\x8a\x70\xe0\x48\xcc\xff\xaa\x37\xca\xce\xc3\x48\xd5\x86\x58\xa9\xb7\xcc\x04\x50\x60\x59\x08\xf8\xaa\x52\x6c\xf0\x37\xaf\x06\xee\xf7\x67\x81\x51\xf7\x6f\x5a\x5b\x4c\x4e\xaf\xb6\x63\x9a\x67\x10\xe1\xc8\xbb\x0f\xbe\xe3\xcb\xe2\xb5\x4b\x0d\x34\xe6\xbb\x0e\x8c\xc9\x8c\xdf\x20\x89\x92\x00\x26\xbe\xb9\x4b\x54\x6b\xc5\x43\xc2\xbe\xa0\x9c\x08\xda\x9a\x1d\xdf\xf1\x50\x07\xbc\x22\x16\xf3\xc8\xfa\x4d\x40\x9e\x6d\x47\x70\xed\xee\x5f\x0f\x9b\x3e\xaf\xb9\xb8\x2d\x82\xd2\x73\x69\x73\xed\xf5\x07\xe6\xa1\x3b\x31\x28\xf5\x22\x5e\xf1\x47\xeb\x0b\xf7\xbb\x2a\x17\x69\xd6\x53\xad\x11\x55\x32\xb1\xac\x3d\x6e\x08\x4c\xf0\x87\x49\xf7\x22\xa8\x4a\x62\x01\xd2\xae\x38\x6e\x4c\xe3\x6e\x76\x0b\x66\xca\x3b\x8a\x5a\x53\x0d\x4e\x68\x47\xc7\x97\xe5\x8f\xf7\x1c\x51\x47\x33\x67\x2c\x50\xcd\xc5\xfc\x8c\xec\x23\xd8\x11\x14\x4e\xb2\x04\x15\x49\xc0\x78\xfa\x45\xdd\xe2\x3a\x9e\x12\x7a\xbb\xd5\x92\xb7\xbe\x41\x19\xe9\x00\x86\x25\xd3\x2a\x0a\x16\x00\x4e\xd2\xb0\x14\xb4\x1f\xda\x60\x17\xb9\xca\x5e\xcd\x15\xa8\x2a\x22\x2f\x5e\x20\x70\x05\xe1\x60\x76\xcd\x9b\xa9\x33\x9f\xdb\xc4\x58\x6a\xe2\xea\x94\xae\x91\x41\xe6\xa2\x1b\x6e\x26\xaa\xea\x99\xee\xb2\x4c\xe3\x48\x76\xfe\x62\x8e\x62\xfb\x88\xc8\x1d\x46\xf9\x81\x90\xb1\x97\x2f\x3d\x70\x9a\x3b\xf7\x74\x2b\xac\x3f\xf7\xd4\x27\xa0\x96\x3f\xd1\x5b\x51\xd4\xb7\x1b\x67\xda\x0d\xde\x00\xf1\x3a\xcd\xcd\x8e\xcb\xe4\x01\x64\xe8\xd1\xed\xeb\xa5\xbf\x1e\x47\xd7\xa1\x08\xf5\x4c\x99\xd6\x2f\xde\x1b\xdf\x2d\x6d\xf6\x0d\x34\x18\x65\x56\xea\x53\xe4\xfe\xf5\xf6\x33\xa3\xa1\x30\x4c\xdb\x3b\x28\x67\x1f\x92\xec\xf6\x73\x19\xc7\xda\x0f\x94\x41\xa7\x36\x81\x35\xa6\xe3\x88\xe7\x2f\xb6\x86\x3a\xef\xe7\x57\x97\xe3\x02\xbd\x45\x71\x85\x2d\x34\x74\xe5\xab\x0b\x49\xdb\x23\x67\x6e\xef\x89\x09\x3b\x6f\x42\x3f\x50\xac\xbd\x39\x81\x89\xe1\x06\x61\xcf\x82\x05\xd9\x9c\xb9\x90\x18\x7f\xe9\x8f\xbc\xbc\xba\xda\x2f\xbf\xf3\xdb\xef\x9b\xc2\xaf\x4f\x2d\x74\xba\xcb\xc2\x8f\x9d\xa3\x23\x8e\xf7\x23\x9c\x1c\x9d\x9e\xeb\xe8\x97\xa0\xae\x74\xec\x8b\xf7\x60\x09\x1b\xed\x51\x3d\x01\xc2\xa5\xf1\x43\x46\x03\xfd\x4c\x1f\xc1\xf6\x62\x95\x51\xcc\x48\x7a\xa3\xa1\x28\x89\x75\x0c\xd8\x98\xcf\x27\x2f\x56\xc9\xe8\xd7\x75\x93\x9f\xc7\x1c\x0e\xe4\x57\x34\xc2\xb5\xdf\x6d\x87\xf2\x46\x0c\x09\xdc\x7d\xe2\xb0\x3d\x7b\x63\x80\x54\xa7\x62\x1c\xc4\xf4\x74\xac\x2d\x07\x95\xc1\x02\x20\x55\x80\x07\x26\x5b\xbd\xa7\xfa\xdd\x48\xcf\x1d\x67\x01\xf4\x44\x00\xac\x9f\xbd\x85\x9f\xe3\x3f\x2b\x12\x82\x82\x35\xd0\xcf\xaa\x37\xfe\xa9\xe8\xf6\x67\xf7\xb4\x87\x45\xe3\x06\x0b\xf7\x7b\x30\xc0\x5a\x76\x4f\xef\xe4\x93\x18\xad\x76\x71\x20\x3d\x12\x5a\xa0\x2b\xa1\x4e\x01\x16\x77\x50\x21\x0a\x10\x5b\x2b\x29\x87\x36\x8e\x1a\x73\xab\x74\x0a\x65\x31\xc7\xaa\x72\x07\x55\x5d\xf8\xbb\xda\xcd\x71\x30\x1f\x72\xd3\x09\x94\x96\xdf\xc3\x67\x85\x0f\x22\xd8\xee\xf8\xca\xa3\x68\x34\xd2\xfb\xde\x92\x08\xf8\xde\xb0\xc2\x68\x4b\x4d\x81\xed\xaa\x77\x8a\x18\xf6\xd5\xc2\x73\xf2\x55\x52\xc0\xbf\xe5\xd1\x59\x37\x2d\x9a\xf9\x5a\xe6\x59\x7a\x0a\x56\xf6\xb6\xaf\x43\xe8\xea\x9d\x68\x87\x09\xab\xbc\x35\x64\x72\x70\x46\x37\x51\xfe\x90\xf2\xee\x93\xa5\x0f\xc2\xa5\xb7\xe2\x68\x8e\xa7\x84\x9a\x4a\x84\xf6\xe4\x1d\xd6\x44\x76\x53\xaf\x56\xfd\x6d\x68\x73\x52\xd9\x2d\x4b\x9b\x06\xf2\xb4\xa5\xa1\xa5\xe1\x48\x7b\xdb\x56\xa1\x62\x03\xe6\xc2\xad\x4b\xe4\xe0\xbb\x5f\xc4\xd7\x9e\x51\xba\x2d\x5f\x92\x65\xba\x1e\x11\x95\x26\xae\x83\xa7\xfb\x95\x27\xfc\xb3\x71\x56\x29\x4d\x5a\xf3\x8d\xad\x46\x34\x5b\x5a\x46\x08\xc8\x8d\xb2\x49\x8a\x36\x73\x30\xfb\x7d\x55\x3f\xaa\x7e\xfa\xb6\x1b\x9c\x0d\xba\xe2\x6f\x69\x84\xee\xd8\xb8\x99\x6f\x5c\x8c\xc2\xf9\x6b\x3a\x1b\x2e\xb7\xcf\x55\x82\x7a\xa8\x5b\x44\x1a\xbb\x22\x55\x7c\xaa\xa3\x9e\x0e\xca\xa2\x10\xe3\x01\x2e\xb8\xe1\x8a\xe4\x9c\xd9\xdb\x99\x83\x9b\xcf\x3c\xb6\x07\x49\x31\xcb\x44\xbc\x64\x1c\x47\x4b\xce\x33\xbc\x4c\x48\x03\x78\x86\x91\xcc\xdc\xea\x49\x45\x6c\xc2\xea\x8e\x68\xb2\xaf\xa2\x6d\x9f\xc5\xdc\x47\x58\xac\x63\x33\x6a\x72\x12\x16\x4c\x30\x94\xb4\x30\x11\x80\x7e\x89\xb1\x38\x58\x45\xbb\x13\x8b\x4c\x51\x89\x4e\x3c\x32\xdf\x6a\xee\x05\x6c\x11\xf5\x3e\xff\x2e\x7f\x04\x78\x4b\x27\xd3\xca\x17\xcf\x89\xcf\x80\xcf\x87\xe4\xb4\x6c\x77\x29\x56\x28\x89\xe7\x7c\x79\xfa\x80\x4d\xfa\x7a\x8c\x85\xb6\xb9\x58\x4c\x9f\xf4\xeb\xd0\x93\xf6\x2c\x7a\x0d\x69\xd2\xc2\x14\xb8\x11\x0a\xa1\xc9\x3c\x95\xc2\xf1\x4a\x2a\xf4\x8c\xda\x14\xba\x08\x6d\x5e\x03\x30\xb3\xe9\x71\xdb\xa0\x12\x92\x49\x71\x16\x45\xf1\x0e\x2f\x17\xdd\x97\xe3\xb3\x38\xcd\xdc\x7c\x07\xc4\xd0\x59\xfa\x09\xbb\xdf\xcc\xce\x12\x0b\xde\xa6\xc0\x91\xc8\x72\xa1\xe3\xb1\x4a\xf3\x75\xce\xd0\x65\xde\x05\x8a\xf1\x5f\xe4\x4f\x8c\x08\x26\xff\xef\x11\xf3\xbf\x00\x00\x00\xff\xff\x13\xd4\xe6\xdd\x87\x06\x00\x00")

func certTunnelCsrBytes() ([]byte, error) {
	return bindataRead(
		_certTunnelCsr,
		"cert/tunnel.csr",
	)
}

func certTunnelCsr() (*asset, error) {
	bytes, err := certTunnelCsrBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cert/tunnel.csr", size: 1671, mode: os.FileMode(420), modTime: time.Unix(1455206881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _certTunnelKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x97\x37\xd2\x84\xca\x92\x46\x7d\x56\x71\x7d\x62\x82\x6e\x34\x26\xd0\x68\xad\x85\x87\xd6\x5a\xb3\xfa\xf9\xef\x7b\x63\x4e\xb9\xe5\x54\x64\x7e\x27\xeb\xe4\xff\xfc\x7b\x18\x4e\x90\xf4\x7f\x6c\x87\xfe\xc7\xb4\x25\x9f\x76\xb9\x7f\x14\x2e\xfa\xcf\x0d\xa0\x49\x92\xac\x58\x12\x43\xd3\x0a\x4b\x57\x1c\xfd\x08\x85\xbb\x2d\xd7\x47\x3a\x58\x48\x58\x8e\x8d\x69\x1d\x27\x4f\xf0\x5e\x42\xb5\x55\xeb\xa3\xf5\xc1\xe1\xf6\x42\x9e\x01\x8b\xe7\x7a\x8e\x99\x19\xf0\x10\x3a\x5d\x34\x6c\xa8\x27\x5e\xa6\xf3\xc9\x5a\xbe\xaf\x80\x8f\xdc\xd0\x3a\xbf\xe0\x42\xf8\xa7\x20\x5d\xd8\x08\x3d\xc5\x64\x42\xb3\x83\x4e\xd5\xd8\x89\xe4\xb2\x9a\x4c\x3e\x54\x93\x15\x62\x06\xf8\xe6\xc6\xfa\x12\xb3\xea\xcb\x43\xb4\xe4\x98\x81\x7f\x5a\xb3\x82\x85\x85\x5b\x03\x66\x99\x38\x0e\x1c\x28\x66\x75\x3b\xe4\xc8\x3c\x96\x81\x82\x8b\x4e\xe9\x9a\xd7\xc7\xd3\xd6\xdf\x38\x39\x67\x17\xe0\x71\x6e\xea\x2e\xc9\x31\x7a\xde\xcb\x8a\xd8\x85\x47\x8c\x9b\xe0\x93\x8a\x3a\xf8\x82\x93\x4e\xec\xd3\x1f\xc6\x4e\x59\x4c\x57\x91\x4b\x9a\xbb\xba\xc6\x03\x3f\xcc\xeb\x01\x25\x5c\xec\xc0\x16\x03\x50\xd5\xc6\x30\x39\xf4\x68\x55\x4b\x45\xb4\x14\xad\xd4\xc6\x1a\xe9\x76\x09\x57\xc1\xdc\x8a\xaa\x47\x5d\x57\xdc\x76\x64\xc9\x84\x2f\x92\x20\xa7\x7d\x77\xe1\x54\xc0\xf5\x42\xfb\x59\x3b\xa7\x6d\x05\xea\xf8\x36\x71\xc8\xfa\x4e\x5d\x6f\x7d\x8d\xe7\x59\x86\xb1\xf1\x83\x0b\xee\x02\xb3\x6f\x5b\x86\xa9\x11\xb1\xee\x6d\xf8\xc9\x18\x41\xcd\xd4\xaf\xf1\x03\x4b\x95\xd9\x43\x9f\x9e\x11\x84\x88\x31\x1c\x10\xd3\x48\xfa\x80\xaa\x23\xd1\xa1\x29\xc1\x24\xd5\x53\x6b\x47\xe7\x8c\x7b\xe8\xb2\xb4\xab\xa3\x10\x84\xc4\xfa\x3d\x1f\xdd\xc7\x1d\xd2\x08\x1e\xfd\xc1\xa2\x99\xa9\x2f\x6c\x0f\xd7\x96\xc5\xdc\x1f\x20\xbf\x3b\xed\x34\x0b\x68\xc7\xe0\xee\xff\x2a\x81\xd4\xac\x4d\xe2\xa0\x91\x78\xf1\x45\x9f\x59\x91\x3c\x6d\x3b\xb8\xc8\x15\x13\x5c\x18\xdd\xf2\x9e\x20\xe2\x7a\xf8\x81\xef\xce\x68\xa5\xe1\x97\x15\x40\xb9\xcd\xa6\xb2\x65\xb0\x42\x6a\xe4\x14\xed\xc4\x81\x14\x1f\x21\x90\xf5\x7a\xe0\x66\x61\x34\x8f\xbc\xfa\x68\x4b\x67\xff\x85\x8c\x80\xf7\x41\xfc\xb0\x83\x42\xc6\x02\x51\x9a\x73\x21\xd4\x08\x17\x10\x69\x75\xaf\x24\xdd\x6f\xdd\xa6\x17\x32\x25\xdc\x25\x6b\x40\xf6\xde\x0b\xf3\xe4\x2e\xa4\x75\xf8\x7d\x68\x79\x1f\xbb\x12\x8b\x4e\xf9\xec\x13\x4a\xe2\x9a\xce\x7f\xdb\x03\xda\x69\x2f\x0a\xf8\x0e\xa0\xf9\x4e\x87\x67\xbb\x1b\xeb\xf6\xef\xd5\x32\xa2\x0a\x7b\xd1\x36\xa8\x77\x17\x70\x49\x53\xe2\xec\x8c\x54\x6c\xb2\x93\x0a\x31\x8f\x4b\xfe\xaa\x61\xc6\x87\xca\x3f\x65\x0e\xa7\x3e\x2c\x7d\x71\x34\x40\x5b\xff\x8d\xf0\xd2\xe9\xfe\x61\x16\xbe\x4f\x3f\x85\x27\x2d\x8a\xa8\x1e\xfa\x06\xa3\x3b\x82\xa0\xf6\xee\x2a\x0c\x7d\x6d\xbf\x1e\x53\x2d\xc3\x93\xaf\x8d\xe8\xa9\xeb\x08\xc9\xa1\x20\x58\x40\x95\x9c\x95\x1e\x4a\xf6\xca\x1d\x5b\xc1\x10\x78\x3a\x7f\xbf\xba\xeb\xb3\x62\xdb\xb3\x78\x74\xe4\x33\x52\x95\x20\xa4\xdd\x63\x64\xb3\x64\xb0\x07\x7b\xd1\x37\xab\x4d\x8a\x43\x7a\x72\x82\x27\x12\x60\x8a\xc2\x7c\x1d\x9d\x7b\xf8\xb9\x9c\xe0\xef\xd5\x84\x3a\x8e\x9c\xcd\x08\xc9\xc1\x3e\x74\x47\xf9\xd5\x66\x25\xbd\x58\x78\xec\x3a\x20\x36\xd6\xac\xa7\x52\x36\x68\x0b\x9f\x7a\x27\x7a\xa1\xe2\x26\xa0\x80\x8d\x1c\x7e\x72\x9f\xdf\x3e\x57\x85\x17\xa4\xf8\x69\x9b\x82\x5e\x5a\xec\x1a\x3f\xad\xf8\x21\xac\xf2\x1d\x29\x3e\xd0\xf2\x91\x47\xbb\x40\xb2\x96\xe1\xf8\x74\x79\xdb\x7f\x12\x47\x3c\xca\x48\x01\x5c\xa4\x76\x5f\x15\x21\x0c\xf8\x1b\x50\x6b\xe0\x2c\x81\x85\x84\x7c\xfb\x95\xab\x13\x1b\xc4\x66\xb0\xec\xf8\xd7\x20\xf4\x04\xf2\xd3\x0e\x26\x52\xc3\x34\xf0\xc3\xb4\x1c\xe2\x68\x1f\x5e\x28\xd5\x1a\x18\x47\x70\x5d\xdd\x7d\xeb\xf8\xbb\x4f\x1f\x94\x51\x27\xef\xa6\xef\x97\x6c\xb1\xe4\x6e\xa1\x3f\xf8\x3a\x27\x13\xbe\xf5\xb7\x7f\xb9\x09\x91\x19\x45\x7d\xf3\x0a\xc3\x08\xdb\x43\x87\x92\xab\x99\x00\xb8\xd7\x59\x8a\x2d\xa4\xb8\x27\x31\xdd\x46\x18\x69\xe2\xfa\x53\xeb\x49\xa7\x7f\x72\xdd\x95\xa6\x5e\x6a\x4d\x99\x5b\x53\x17\xe6\x77\x8c\x99\x69\x0d\x31\xbe\xe6\x26\x11\x53\x39\xee\x7f\x5c\x12\x2b\xc0\xdf\xdc\xfd\x7d\x4c\x8b\x31\xae\xf6\xce\x20\xe7\xc3\xe8\x43\x7c\x95\x23\xf5\xa2\x0b\xd8\xe2\x37\x13\x0e\xc7\x16\x80\x6d\x29\xb0\x18\x26\x93\x08\x15\x15\x89\xa0\x91\xaa\x72\xb3\xf6\x11\xcc\x28\x50\x35\x49\x22\x16\xac\xdd\x80\x10\x5f\xb2\x60\x3f\xe5\xd6\xc7\xe1\x53\xb7\x49\x68\x0f\xb7\x52\x82\xaf\x54\xcc\x20\x50\xa2\xe4\x8b\xba\xbe\xbe\xec\xbb\xd9\x4b\xa1\xc2\x73\xb6\x29\x79\xba\xde\x32\x00\x19\x98\xda\x91\x60\xab\x2e\xe7\x5f\xd8\xcf\xf2\x87\xeb\xb0\x2c\xc9\xe8\xfd\x8b\xa5\x78\xac\xe3\x6c\xac\x41\x2c\x12\xfc\x84\xf0\xa4\xf4\x9b\x37\x5e\x1e\xc4\x79\x26\x34\xd0\x61\x67\x81\xbc\x6e\x40\xf8\xf2\x02\xf1\xaa\x57\xde\x0c\x36\x55\x87\xdd\x72\x2e\xc8\x74\x3f\xfc\x55\x1f\x69\xcf\x76\xd0\x1c\xa3\x38\x87\x43\xb2\x90\x9a\x3e\xdf\x30\x90\x53\x71\x6c\x55\x71\x0c\x6d\x3e\x41\x2b\x0b\x24\x50\x55\xb1\xe4\x0b\xd7\x12\xb4\x33\x7d\xe9\x9e\x33\xd7\x38\xb4\xa5\x8d\x7d\x30\x35\x27\x17\x0f\x5d\xd4\xdd\xc8\xd9\x7a\xa2\x86\x84\x12\x40\x2d\xbb\x8b\xf5\x25\x1b\xd9\x77\x38\x86\x93\x9b\x61\x15\x28\x72\xfe\xa3\xac\x38\xac\x0f\xaa\xf4\x8d\xc1\xb3\x83\x9b\x76\x6a\xb0\x8d\x0b\x5f\x34\x9f\x7f\x55\xb5\x2a\x7f\xac\xbe\x72\x17\x51\xc9\x90\xba\x88\x44\xc3\xf4\x14\xbc\x89\x4e\xae\xb2\x9d\x82\x27\x00\x71\x70\x49\x2d\xad\xa3\x1f\x26\xc2\xe6\x3d\x18\xa8\xe8\x75\x4b\xf2\xf6\xe2\xfd\xf1\x47\x1d\x6d\xf5\xc4\xb7\xc6\x54\xf7\xc7\xcb\xdd\x29\x54\x8a\x9d\x14\xa7\xa7\xe1\x67\xce\xee\x09\x09\x63\x34\xd0\x6e\xce\x21\x78\x8b\x14\xbb\xf7\x8c\x67\xbb\x4a\x30\x3a\x77\x6c\x90\xa3\x44\xd4\xc0\xa6\xfa\x8d\xc6\x82\x27\xf4\xa7\xd9\xad\xbc\xee\x43\x75\xcf\x9f\x7d\xeb\x7d\x89\xe0\xb3\x63\xfb\x4f\xd5\x4b\xa0\x53\x8a\xbd\x26\x12\x44\x8f\x5a\x58\x77\x2e\xa6\x24\x0f\x75\xea\xa2\xe5\xc1\x3b\x67\x4c\xa7\x50\xdc\x67\xca\x25\x38\xc9\xcd\x23\x73\x53\x2f\x26\xe6\x04\x9b\xf8\xbc\x34\xd7\xcd\x1c\x74\xc8\x2a\x80\x8d\x98\x1d\x16\x09\x7d\xf3\xe1\x5f\x63\xb3\xff\x56\x58\xdb\xb2\x8e\x38\xe5\x47\x32\xc0\xc1\x39\x9b\xba\x2e\xdc\x48\xe0\xc0\xfe\x54\x2d\x6b\x60\x7a\x0f\xd9\xe0\xa2\x67\x8d\xa5\x46\x0a\xc0\xb8\x84\x6e\x31\x65\x6d\x9f\x42\x18\xa1\x55\x4e\x73\xca\x92\x08\x12\xba\xec\x56\xf8\xfa\x89\x25\x3a\xf5\x9d\x29\x61\x1d\x4d\x56\x33\x3e\x12\xe4\x29\x42\x7c\x72\x95\x9a\xcf\x98\x2c\xf1\x53\x37\x60\x10\x4a\xd9\xb3\xac\x9c\x4a\xd7\x46\x4b\xa6\x28\xc2\x5a\xb8\x8f\x26\x84\xb8\xb5\x20\xcb\xa0\x6e\xd9\xb4\x69\xf1\x03\x34\x7b\x8d\x15\x37\x45\x2d\x7f\x6d\x48\xb9\x8d\xa9\x0f\x87\x47\x9b\xa2\x07\x78\xcc\x26\x8f\xb5\xbf\xb1\xbf\xa0\x03\x62\xc4\xf7\x9d\x79\xe1\xb6\xab\xa1\x45\xa1\x15\xc2\x85\xcc\xe8\x8f\x9f\xb0\x8e\x79\x68\x62\x1a\x3c\x2b\x19\xb2\x66\xcc\x32\x10\xb0\xad\x2f\x74\x8b\x43\x4f\xe0\x44\xfc\x87\x64\x4b\xfe\xb9\x04\x9f\x19\x64\x75\x8d\x26\xe5\xb4\x10\xba\x38\xfc\x1d\x49\x3c\x2f\xa2\x46\xd1\xd5\xce\xc8\x38\xb3\x9e\x92\x63\x1b\xfb\x55\xf5\x89\xaa\x41\xe6\x4e\xc4\xcf\xb5\x27\x00\x9b\xdf\xf2\x63\x10\x7f\x93\x97\xea\x3b\x88\x50\xe0\x6f\x32\x2e\x4c\x54\x96\x09\x22\x10\x26\xbc\xf9\x60\xf2\xb3\xbf\x8e\xcf\x5e\xdb\xff\x45\xb8\xd5\xe7\x7d\x5f\xd5\xf7\x0d\x19\x61\x68\x81\xac\xdb\x74\x03\x77\x87\x4a\x13\x56\x01\xe9\x77\x90\x33\x03\xcc\x64\x24\x2b\xfc\xfc\x34\xff\xc0\x16\xd7\x55\x9c\xf4\x92\xf6\x5e\x9a\x5c\x8b\x07\x07\x8b\xf9\xf4\x5d\x52\x16\x44\x35\x7d\x04\x34\x02\x40\x7a\x9f\xcc\xf9\xf5\xd8\xcd\x41\xd1\xa1\xd3\x6f\x9e\xbe\xac\x4e\xe6\x79\xa6\xc9\x41\x6d\xf6\xf4\x9d\x89\xb3\xe7\x61\x4a\x09\xbd\x7c\x5f\x3c\xee\xc4\x42\xda\x1f\x94\xa9\x17\x98\x66\x36\xb7\x01\x06\xbb\x8f\xae\xd6\xbf\x62\xc3\x31\x9f\x19\x74\x62\x9b\xe2\x48\x6a\x2a\x04\x5a\x11\xa7\x66\x59\xcd\xa3\x3d\x78\xc4\x44\xa5\x5e\xa9\x93\xef\x93\x71\x6e\x56\x0e\x5a\xe9\x38\x11\xa5\xc1\x7b\xca\x02\x64\x06\x8b\xc3\x90\xca\xc5\x77\x6a\x9b\xee\x9e\x4b\xed\x19\x8e\x6b\x50\x74\x45\x24\x07\x2a\xba\xf1\x5a\x66\x60\xde\xbe\xb1\x27\x7e\xaa\x0f\x12\xf3\x24\x25\x60\xd1\x6a\x2c\x8a\xf1\x04\xf4\x6e\x02\x50\xf3\x07\x92\x41\x2b\x50\x25\x06\x53\xbf\xdc\xed\xd9\x79\x17\x47\x6c\xbb\xef\x68\x87\x29\xee\xd4\x1d\xba\x9e\x56\x5f\xca\x78\xa1\xea\xbe\x58\x02\x61\x39\x9b\xb0\x36\xee\x26\xd2\x6d\xdf\x15\x80\x48\xe6\x3a\x11\x6b\xff\x56\x98\xb6\xa2\xce\x03\x4b\xb6\x5c\x7f\x4a\xfd\xd7\xfa\x73\xde\x0a\xf2\x84\x4d\x6d\xd4\xaa\xf9\x5a\x9c\xf3\x67\xb1\x1c\xb9\x7f\xbe\xd9\x2a\xbc\x18\x2f\x06\x70\x90\x13\x80\xee\xce\xef\xb9\xb5\x2c\x88\x39\x84\x72\x0c\xc3\xb7\xf7\xd5\xa5\xbb\x34\xb2\x3d\xcd\xbc\x9d\x08\xb9\x69\x2e\xe5\xfa\xec\xa1\xe3\x10\x58\x13\x51\xdb\xb2\x54\x26\x19\xad\xe1\x26\x68\xae\x24\x0a\x80\x51\x34\x03\x97\x46\x16\xa2\x57\x6d\xcc\x14\x9b\xd4\x29\xf2\x36\x39\xe9\xa9\xb0\x17\xb7\x28\xae\xe1\xfd\x09\x93\x52\x3d\x75\x6f\xca\xa0\x70\x26\xc8\xb5\x2f\x7e\x99\x4c\x54\x4e\xfe\xf8\xe6\xbc\x80\xf5\x72\x44\xb1\x39\xdf\xb1\x49\xe4\x68\x96\x87\x25\xd6\xc9\xf3\xfb\x21\xaa\xf6\xad\xb0\x7d\x5d\x6e\x0f\xed\x79\xb1\xfb\x1e\xb8\xa0\x04\x0e\xb4\xce\x41\xcd\x29\x61\xb4\xf4\xcb\xaf\xce\x78\x33\x04\xd6\xad\xa3\x71\x5e\x86\x9f\xe6\xcf\x2b\x47\xce\xd8\xfb\x1b\x3c\xd2\x2c\x6b\xd4\xd8\xbc\x1f\x34\x7d\xa4\x4c\x9b\xdb\x8b\x95\x3c\xf9\x89\x96\x8d\x1d\x32\x3e\x84\x60\xad\xee\xf3\x1a\xdb\x89\x42\x03\xcc\x3c\x35\x16\x2a\xf0\x72\x86\xaa\xba\x5d\x75\x22\x51\xac\xa5\x92\x5d\x31\x7a\x75\xef\xe7\x8d\x98\x7f\xfd\xc1\xa2\xeb\xee\x99\x6d\xa8\x04\x37\xd7\xa0\x70\xc6\x3b\x91\x71\xa6\x8c\x99\xc9\x3a\xa0\xf0\x62\x62\x5b\xd7\xcd\x95\x73\x32\xaf\xec\x83\xeb\x1f\x7d\xbc\x51\x62\x2b\x19\x25\x4a\xc5\xa7\x34\xa7\x14\x82\xce\x9f\xf3\x3e\xad\x9b\xce\xf2\x03\x1d\x10\x08\x25\x72\x81\xea\x47\x5f\xf0\x1b\x70\xab\x92\x75\x13\x6e\x2e\xb1\x14\xe3\x48\x5c\x4f\x2a\xae\x40\x53\x96\x49\xbc\xa7\x82\xb1\x85\x9f\x8a\xb0\xfe\x96\x75\xa7\xe1\x8f\x09\x0e\xdf\xc4\x2e\x65\x9d\x16\xfc\x92\x8c\xfa\x21\x96\x0b\x05\xf8\x0d\x52\x40\xd2\x99\x52\x11\x85\x7b\x88\x82\xce\x4b\x6d\x40\x07\xc4\xb9\xb8\xac\x67\x3f\x0f\xb7\x9c\x14\x46\x04\x8b\xd7\x5b\xfc\x42\xe9\xd4\x4d\x36\x17\xf4\xc4\x02\x52\xb2\x9f\x01\xc3\x91\x13\xc0\x39\xbf\xd2\x5e\x06\xff\x1d\x1e\xb1\x91\x0a\x78\x2d\xd4\xfa\xa7\xfa\x8a\xea\x7c\x5f\x6b\x44\x37\x4a\xa5\x18\xf2\x2e\x3f\xcb\x6d\x84\xc3\x9e\x8f\x84\x83\xb6\x2b\xa8\x73\xb1\x3d\xc8\x66\x33\xd0\x40\xe0\xbc\xc2\x34\x7c\xbf\x8b\xf9\x96\x9d\x2d\xec\x99\xe3\x5b\xdf\xbf\x9f\xa4\x67\xa3\xa2\xc8\x05\xa8\x14\xd3\xaa\x26\x7d\xc1\x3b\xfa\x91\x4c\xb1\xfe\xf7\x12\x03\x55\x9d\xa3\x56\x6f\x0e\xf0\x9f\x95\x83\xd3\x7f\xff\xff\x2a\xf2\xbf\x01\x00\x00\xff\xff\xdc\xb3\xda\x42\xab\x0c\x00\x00")

func certTunnelKeyBytes() ([]byte, error) {
	return bindataRead(
		_certTunnelKey,
		"cert/tunnel.key",
	)
}

func certTunnelKey() (*asset, error) {
	bytes, err := certTunnelKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cert/tunnel.key", size: 3243, mode: os.FileMode(420), modTime: time.Unix(1455206881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cert/id_rsa":     certId_rsa,
	"cert/tunnel.crt": certTunnelCrt,
	"cert/tunnel.csr": certTunnelCsr,
	"cert/tunnel.key": certTunnelKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cert": &bintree{nil, map[string]*bintree{
		"id_rsa":     &bintree{certId_rsa, map[string]*bintree{}},
		"tunnel.crt": &bintree{certTunnelCrt, map[string]*bintree{}},
		"tunnel.csr": &bintree{certTunnelCsr, map[string]*bintree{}},
		"tunnel.key": &bintree{certTunnelKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
